plugins {
	id 'java'
	id 'maven-publish'
	id 'java-gradle-plugin'
	id 'idea'
	id 'eclipse'
	id 'groovy'
	id 'checkstyle'
	id 'jacoco'
	id 'codenarc'
	id "org.cadixdev.licenser" version "0.5.0"
}

sourceCompatibility = 16
targetCompatibility = 16

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 16
}


group = 'org.quiltmc'
archivesBaseName = project.name
def baseVersion = '0.8'

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version = baseVersion + '.' + ENV.BUILD_NUMBER
} else {
	version = baseVersion + '.local'
}

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
	}
	mavenCentral()
}

configurations {
	bootstrap {
		transitive false
	}
	compileClasspath.extendsFrom bootstrap
	runtimeClasspath.extendsFrom bootstrap
}

dependencies {
	implementation gradleApi()

	bootstrap project(":bootstrap")

	// libraries
	implementation ('commons-io:commons-io:2.8.0')
	implementation ('org.zeroturnaround:zt-zip:1.14')
	implementation ('com.google.code.gson:gson:2.8.6')
	implementation ('com.fasterxml.jackson.core:jackson-databind:2.12.3')
	implementation ('com.google.guava:guava:30.1-jre')
	implementation ('org.ow2.asm:asm:9.1')
	implementation ('org.ow2.asm:asm-analysis:9.1')
	implementation ('org.ow2.asm:asm-commons:9.1')
	implementation ('org.ow2.asm:asm-tree:9.1')
	implementation ('org.ow2.asm:asm-util:9.1')

	// game handling utils
	implementation ('org.quiltmc:stitch:0.6.1') {
		exclude module: 'enigma'
	}

	// tinyfile management
	implementation ('org.quiltmc:tiny-remapper:0.3.2')
	implementation ('org.quiltmc:tiny-mappings-parser:0.3.0')

	implementation 'org.quiltmc:access-widener:1.0.2'

	implementation ('org.quiltmc:lorenz-tiny:3.0.0') {
		transitive = false
	}
	implementation ('org.cadixdev:lorenz-io-proguard:0.5.6')

	// decompilers
	implementation ('org.quiltmc:quiltflower:1.4.0')
	implementation ('org.benf:cfr:0.151')

	// source code remapping
	implementation ('org.cadixdev:mercury:0.1.0-rc1')

	// Kapt integration
	compileOnly('org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.0')

	// Testing
	testImplementation(gradleTestKit())
	testImplementation('org.spockframework:spock-core:2.0-M5-groovy-3.0') {
		exclude module: 'groovy-all'
	}
	testImplementation 'io.javalin:javalin:3.13.7'

	compileOnly 'org.jetbrains:annotations:20.1.0'
}

jar {
	manifest {
		attributes 'Implementation-Version': project.version
	}

	from configurations.bootstrap.collect { it.isDirectory() ? it : zipTree(it) }
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

license {
	header rootProject.file("HEADER")
	include "**/*.java"
	include "**/*.groovy"
	exclude '**/loom/util/DownloadUtil.java'
	exclude '**/projects'
}

checkstyle {
	configFile = file('checkstyle.xml')
	toolVersion = '8.42'
}

codenarc {
	toolVersion = "2.1.0"
	configFile = file("codenarc.groovy")
}

gradlePlugin {
	plugins {
		fabricLoom {
			id = 'org.quiltmc.loom'
			implementationClass = 'net.fabricmc.loom.bootstrap.LoomGradlePluginBootstrap'
		}
	}
}

jacoco {
	toolVersion = "0.8.6"
}

// Run to get test coverage.
jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}

test {
	maxHeapSize = "4096m"
	useJUnitPlatform()
}

import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.Node

afterEvaluate {
	publishing {
		publications {
			pluginMaven {
				artifact sourcesJar
				artifact javadocJar
			}
		}
	}
}
publishing {
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				name = "Quilt"
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		} else {
			mavenLocal()
		}
	}
}
// Need to tweak this file to pretend we are compatible with j8 so the bootstrap will run.
tasks.withType(GenerateModuleMetadata) {
	doLast {
		def file = outputFile.get().asFile

		def metadata = new groovy.json.JsonSlurper().parseText(file.text)

		metadata.variants.each {
			it.attributes["org.gradle.jvm.version"] = 8
		}

		file.text = groovy.json.JsonOutput.toJson(metadata)
	}
}

// A task to output a json file with a list of all the test to run
task writeActionsTestMatrix() {
	doLast {
		def testMatrix = []
		file('src/test/groovy/net/fabricmc/loom/test/integration').eachFile {
			if (it.name.endsWith("Test.groovy")) {
				if (it.name.endsWith("ReproducibleBuildTest.groovy")) {
					// This test gets a special case to run across all os's
					return
				}

				def className = it.name.replace(".groovy", "")
				testMatrix.add("net.fabricmc.loom.test.integration.${className}")
			}
		}

		// Run all the unit tests togeather
		testMatrix.add("net.fabricmc.loom.test.unit.*")

		def json = groovy.json.JsonOutput.toJson(testMatrix)
		def output = file("build/test_matrix.json")
		output.parentFile.mkdir()
		output.text = json
	}
}

tasks.named('wrapper') {
	distributionType = Wrapper.DistributionType.ALL
}